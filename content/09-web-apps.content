% Making Mobile Goodness with Frameworks
% A Quick Introduction to jQuery Mobile

## Tracking Dead Zombies

Sigma Stronghold leaders want a way for agents in the field to be able to record their zombie kills.

App-like web sites.

### Illustration: WHERE WHEN HOW

![](images/09-3ws.png)

## The general Idea

### Illustration: Sketch

![](images/09-sketch.png)

## Nabbing a Zombie

### Illustration: Data Sources

![](images/09-data-sources.png)

## Where we're headed

### Figure: End Result

![](images/09-done.png)

## Frameworks

### So, *how* do we build something like this?

Frameworks, libraries, tools, templates...all of these can give you a leg up.

## What frameworks give you

* Mobile-like styling and widgets
* "App-like" polish and feel
* Development shortcuts, tools, hooks, libraries
* Consistency
* Cross-platform reliability

## Things to keep in mind

* Platform support
* Performance
* Community
* Goals
* The future

## jQuery Mobile

![](images/09-jquerymobile-com.png)

* jQuery Mobile is a mobile web framework built atop the popular jQuery library.
* jQuery Mobile works hand-in-hand with semantic HTML5 markup.

## Steps to building our Kill Board

1. Build a basic jQuery Mobile page and understand how it's put together.
2. Mock up our markup (controls, layout)
3. Add some basic behavior with JavaScript (don't worry if JS is not your cup of tea)
4. Add some more advanced behavior to take advantage of device localStorage (ditto)

## Building with jQuery Mobile

Content and applications with jQuery Mobile are constructed from:

1. HTML5 markup.
2. jQM's CSS (for mobile-like styling) and JS (for navigation behavior and more)
3. Your custom JS for app-like stuff.


## jQuery Mobile page structure

### So, what does a jQuery Mobile page look like?

~~~ {.html}
<div data-role="page">
  <div data-role="header"></div>
  <div data-role="content"></div>
  <div data-role="footer"></div>
</div>
~~~


## jQuery Mobile Page Structure

### Illustration: Page Structure

![](images/09-structure.png)


## Breaking this down

### The HTML5 `data-*` attribute

## Breaking this down

### Giving clues to jQM

#### jQM "pages"

`<div data-role="page">`

#### jQM page elements/chunks

* Header: `<div data-role="header">`
* Content Area: `<div data-role="content">`
* Footer: `<div data-role="footer">`

## Why not use HTML5 elements?

> "I don't understand why jQM doesn't just use HTML5 elements like `<header>`, `<footer>` and whatnot instead of plopping `data-*` attributes everywhere." —Over-zealous Joe

## Starting *super* Basic


##### index.html


~~~{.html}
<!DOCTYPE html> 
<html> 
<head> 
	<title>I Got One!</title> 
</head> 
<body> 

<div data-role="page" id="nab-zombie">

</div>

</body>
</html>
~~~

## Relying on our bros

Adding in the CSS and JavaScript to make our jQM page go.

~~~ {.html}
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
~~~


## Adding a viewport tag

~~~{.html}
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
~~~

## Hay, Wait!

> "You've disabled user zooming. That is so bad!" —Over-zealous Joe



## Add a header

At the outset, our jQM page is empty. Let's put some stuff in it.

~~~ {.html}
<div data-role="page" id="nab-zombie">
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
</div>
~~~


## And now, a content area...

~~~ {.html}
<div data-role="page" id="nab-zombie">
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
  <div data-role="content">
    <!-- Our content will go here! -->
  </div>
</div>
~~~

### Try it out!

## Et Voila!

### Figure: A header in jQM

![](images/09-header.png)

#### ...OK, so there's no content yet

## Step 2: Dropping in our controls

### Illustration: Controls

![](images/09-controls.png)

## `data-role="fieldcontain"`

### Illustration: Fieldcontain

![](images/09-fieldcontain.png)

## Form controls

~~~ {.html}
<div data-role="content">
  <div data-role="fieldcontain">
    <label for="how-zombie">How'd you nab it?</label>
    <select name="how-zombie" id="how-zombie"></select>
  </div> 
</div>
~~~

1. Add the `div data-role="fieldcontain"`
2. Add a label
3. Add the structure of the `select` element

## And add the `<select>` options

~~~ {.html}
<div data-role="content">
  <div data-role="fieldcontain">
    <label for="how-zombie">How'd you nab it?</label>
    <select name="how-zombie" id="how-zombie">
      <option value="tank">Tank</option>
      <option value="conflagration">Conflagration</option>
      <option value="poison">Poison</option>
      <option value="nukes">Micro-nukes</option>
      <option value="trickery">Trickery</option>
      <option value="corrosive">Corrosive</option>
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div> 

</div>
~~~

* Add `<option>` elements like you do...


## Now, we'll add a button

~~~ {.html}
      <option value="dismemberment">Dismemberment</option>
    </select>
  </div> 
  <input type="button" value="I got one!" id="got-one" data-theme="b" />
</div>
~~~

* We don't need a `fieldcontain` `<div>` because there's no label to group with our button.
* What's that `data-theme` thing?...

## Theme rolling

### Figure: Theme Roller

![](images/09-themeroller.png)

## Adding a custom theme

~~~{.html}
<link rel="stylesheet" href="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.css" />
<script type="text/javascript" src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/mobile/1.0/jquery.mobile-1.0.min.js"></script>
<link rel="stylesheet" href="gotone.css" />
~~~

## Step 2 Complete!

![](images/09-with-controls.png)

Now our fighters have a way to input nabbed-zombie input.


## Dead Zombie Storage

When a soldier nabs a zombie by tapping the "I Got One!" button, we'll need a place to display the info about that poor zombie.

~~~ {.html}
</div> 
<input type="button" value="I got one!" id="got-one" data-theme="b" />
<ul data-role="listview" data-inset="true" id="zombielist">
</ul>
</div> <!-- /End <div data-role="content"> -->
~~~

`data-role="listview"` indicates to jQuery Mobile that this list should be styled as a list widget.


## A list widget what now?

### jQuery Mobile Turns This

#### Code

~~~ {.html}
<ul data-role="listview" data-inset="true" id="zombielist">
  <li><img src="icons/z2.png" alt="Killed by micro-nukes" /><h3>Zombie Nabbed!</h3>
  <p><strong>04/30/12</strong></p>
  <p>Coordinates: 45.5256227, -122.6820616</p></li>
</ul>
~~~

### Reverse: Example of Listview

![](images/09-listitem.png)

### Into this

So...each added zombie, ultimately, will get added as a `<li>` element in that empty `<ul>` we just added.

## Putting list items together

### Figure: List example

![](images/09-mockup.png)

# Let's [get a bit more advanced now](10-advanced-web-apps.html)