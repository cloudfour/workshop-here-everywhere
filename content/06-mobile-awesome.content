% Getting to the awesome parts of mobile
% Device capabilities, tools and more


## Oh, the things we can do with mobile!

### Illustration: Device APIs

![](images/07-device-apis.png)

## HTML5

### Figure: HTML5

![](images/06-html5.png)

## HTML5 APIs and features for the Web

* Device APIs
* HTML Programmable APIs
* HTML5 Elements
* Other HTML Goodies

## Device APIs

> "Cross-platform...Sensors, data and outputs" —Brian LeRoux (PhoneGap)

* Media Capture
* Contacts API
* Network Information API
* Battery Status API
* GeoLocation API
* Accelerometer, vibration, etc.

## HTML5 Programmable APIs and Goodies

* Drag and drop
* Web Workers
* Web Sockets
* Offline functionality via Application Cache and localStorage
* Media Capture (hey...wait...?)

## HTML5 Elements

* `<section>`, `<header>`, `<nav>`, etc.
* New support for many different `<input>` types—big yay for mobile!
* Embedding and objects: `<audio>`, `<video>`, `<canvas>`

# Let's have a bit more fun with Geolocation

## W3C Geolocation API

Geolocation is the darling of many. It's consummately mobile and easy to describe. There are oh so many ways to make good use of a user's current location to deliver adapted experiences or add functionality to applications. Whee!

* The W3C Geolocation API is a standard way of exposing geolocation information to JavaScript in the browser. It is rather well adopted.
* Browsers that implement the W3C Geolocation API expose the `navigator.geolocation` object and its methods to the browser.

## Using the W3C API to get the current location

Here's what it looks like:

~~~ {.javascript}
navigator.geolocation.getCurrentPosition(successCallback, errorCallback)
~~~

### Illustration: getCurrentPosition

![](images/07-get-position.png)

## And what happens in the success callback?

### Illustration: Win Function

![](images/07-win-function.png)

## The Position object

### Illustration: Position

![](images/07-position.png)

# Let's try it out

Hey, let's build a basic geolocation test page to see how that geolocation API works.

## Testing for API support

~~~ {.javascript}
<script>
  if (navigator.geolocation) {
    // Do something, dammit!
  }
</script>
~~~

## Doing something, dammit

~~~ {.javascript}
if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(onGeoSuccess, onGeoError);
} else {
  alert('Sorry, Geolocation not supported in this browser!');
}
~~~

In our version, we're going to use a function called `onGeoSuccess` for a success callback and `onGeoError` for an error callback.

## And now what...?

We need to define our success and error callbacks.

~~~ {.javascript}
function onGeoSuccess(position) {
  var coordinates = position.coords;
  alert(coordinates.latitude + ", " + coordinates.longitude);
}
function onGeoError(error) {
  alert(error.message);
}
~~~

In our success callback, we're looking at the `coords` on the `position` object.

The error callback is always passed an `error` object.

## All together, now

~~~{.javascript}
if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(onGeoSuccess, onGeoError);
} else {
  alert('Sorry, Geolocation not supported in this browser!');
}
function onGeoSuccess(position) {
  var coordinates = position.coords;
  alert(coordinates.latitude + ", " + coordinates.longitude);
}
function onGeoError(error) {
  alert(error.message);
}
~~~


## Another need for the troops

> "Hey, it would be nice if Sigma Stronghold troops could access parts of the site even when they are not connected to the Internet. Service can be pretty flaky in our neighborhood, especially in the zombie-dense areas where they've knocked down the antennas." —Sergeant Dingus

### Illustration: Dingus

![](images/dingus-small.png)

# Creating an Offline Mode using ApplicationCache

## ApplicationCache

* An API that is part of the HTML5 spec
* Define what resources should (or should not be) cached using a cache manifest
* ApplicationCache object and its methods exposed to JavaScript

#### The idea is to create an *offline mode* for your web site or app by defining which resources should be cached by the browser and available offline.

##  Cache manifests

A *cache manifest* is a text file that lets you tell the client about resources that should be cached.

You use cache manifests to define what ends up in the ApplicationCache.

## Cache manifests at a glance

To create and use a cache manifest:

1. Write a cache manifest file that lists resources on the site that the browser should cache.
2. Configure your web server to serve the cache manifest as the correct `MIME` type. (This requirement is going away).
3. Tell browsers about your manifest by using the `manifest` attribute on the `<html>` tag.


## Step 1: Writing the manifest

### Cache manifest syntax

Writing a cache manifest file sounds simple—in premise. In its simplest:

~~~
CACHE MANIFEST

CACHE:
foo.jpg
bar.png
index.html
ding/dong.html
~~~

##### manifest.appcache

## Step 2: Serving cache manifests

Cache manifest files must be served as a particular `MIME` type (`text/cache-manifest`) or browsers will not recognize them.

Often this can be handled by adding the following to your `.htaccess` or other Apache configuration file:

`AddType text/cache-manifest .appcache`

(Preferred extension is `.appcache`)

## Step 3: Tell the browser about your manifest

There is a `manifest` attribute on the `html` element.

`<html manifest="manifest.appcache">`

## Ways things end up in appCache

* Listed in the cache manifest file (explicit)
* Is a document with a manifest attribute defined (implicit)

## Be very wary

### Illustration: Danger

![Make sure to read or watch Jake Archibald's "AppCache: Douchebag" presentation ](images/07-danger.png)

## Conclusion

Cache manifest can be a good approach for creating offline modes of web sites and apps. It tends to be more manageable for smaller or app-like web sites.

# But Wait, there's more

## Frameworks and Tools for Mobile Web

* jQuery Mobile
* Sencha Touch
* PhoneGap and PhoneGap Build (for hybrid apps)
* SproutCore

## Getting a leg up with jQM

### Figure: jQM

![](images/09-jquerymobile-com.png)

## For quick prototyping and building web apps

### Figure: Prototyping

![](images/09-sketch.png)

## Building on HTML5

### Code

~~~~{.html}
<!DOCTYPE html> 
<html> 
	<head> 
	<title>I Got One!</title> 
	
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.0/jquery.mobile-1.1.0.min.css" />
  <script src="http://code.jquery.com/jquery-1.6.4.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.0/jquery.mobile-1.1.0.min.js"></script>
	<link rel="stylesheet" href="gotone.css" />
	<script src="Lawnchair.js"></script>
	<script src="dom.js"></script>
	<script src="date.format.js"></script>
	<script src="geo.js"></script>
	<script src="zombie.js"></script>
</head> 

<body> 

<div data-role="page" id="nab-zombie">
  <div data-role="header">
    <h1>I got one!</h1>
  </div>
  
  <div data-role="content">
    <div data-role="fieldcontain">
      <label for="how-zombie">How'd you nab it?</label>
      <select name="how-zombie" id="how-zombie">
        <option value="tank">Tank</option>
        <option value="conflagration">Conflagration</option>
        <option value="poison">Poison</option>
        <option value="nukes">Micro-nukes</option>
        <option value="trickery">Trickery</option>
        <option value="corrosive">Corrosive</option>
        <option value="dismemberment">Dismemberment</option>
      </select>
    </div>
    <input type="button" value="I got one!" id="got-one" data-theme="b" />
    
    <ul data-role="listview" data-inset="true" id="zombielist">
    </ul>
    
  </div>
</div>

</body>
</html>
~~~~

## Getting a leg up

### Figure: Structure

![](images/09-structure.png)

## Building quickly

### Figure: JQM Web App

![[Example App](../examples/06/03-jquery-mobile-example)](images/09-done.png)



## So, this doesn't work everywhere

A lot of modern browsers implement the W3C geolocation API and Application Cache. But some don't. How can we tell?

# It's time to [understand our browsers and devices](07-devices.html)