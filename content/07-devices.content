% Devices, devices, devices (and browsers)
% Keeping ahead of the apocalypse

## How can we tell who supports what?

* Feature detection: client- or server-side
* Device detection: client- or server-side

## Super-basic JavaScript detection

In the last section, we implemented a very basic JavaScript detection of the support for geolocation.

### Illustration: Geolocation Detection

![](images/08-geolocation-detection.png)

## More complex feature detection using JavaScript

![](images/08-modernizr.png)

The open-source JavaScript tool **Modernizr** is very useful for performing client-side feature detection.

### Test for support of many features.

* HTML5 feature support.
* DeviceAPI feature support.
* CSS3 support.

## Modernizr

![](images/08-modernizr-2.png)

### Modernizr can

* Provide information about browser support in a JavaScript object
* Add relevant classes to the `<html>` element of the page (useful for CSS)
* Be configured just for the needed tests (keeps JS smaller and faster)

## So let's say we want to enhance something for touch-enabled devices

> "Hey, I realize this is sort of hypothetical, but we're between big zombie battles right now. What do you think about making it so all touch-enabled devices get the vertical navigation on the Sigma Stronghold site, even tablets?" —Sgt. Dingus

#### We can use Modernizr to accomplish this mission


1. We can go to [http://modernizr.com/download/](http://modernizr.com/download/) and put together our custom Modernizr build.
2. Include the Modernizr JavaScript in our web page.
3. We're going to use the CSS classes it assigns...

## Simple HTML Page

~~~{.html}
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <script src="Modernizr-touch.js"></script>
  <link rel="stylesheet" type="text/stylesheet" href="../../workshop.css" />
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
  <title>Device and Feature Detection!</title>
</head>
<body>
<h1><strike>Device</strike> Zombie Detection</h1>

<h2 id="modernizr">Current Browser: Modernizr</h2>

<ul>
  <li class="touchdetails" id="details-notouch">Does <em>not</em> support touch events</li>
  <li class="touchdetails" id="details-touch"><em>Does</em> support touch events</li>
</ul>

</body>

</html>
~~~

## Add some CSS Styling...

### Code

~~~{.html}
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <script src="Modernizr-touch.js"></script>
  <link rel="stylesheet" type="text/stylesheet" href="../../workshop.css" />
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
  
  <style type="text/css">
    .touchdetails { display: none; }
    .touch #details-touch { display: list-item; }
    .no-touch #details-notouch { display: list-item; }
  </style>
  
  <title>Device and Feature Detection!</title>
</head>
<body>
<h1><strike>Device</strike> Zombie Detection</h1>

<h2 id="modernizr">Current Browser: Modernizr</h2>

<ul>
  <li class="touchdetails" id="details-notouch">Does <em>not</em> support touch events</li>
  <li class="touchdetails" id="details-touch"><em>Does</em> support touch events</li>
</ul>

</body>
</html>
~~~

## Results

![From a desktop browser (Chrome)](images/08-notouch.png)

![From my iPhone (via Shadow)](images/08-touch.png)

## Classes assigned

![](images/08-inspector.png)

![](images/08-inspector-touch.png)

You can see these from the [Web Inspector in webkit](../examples/07/01-modernizr), for example.

## Doing some good with it

Let's use Modernizr touch tests to change the navigation experience for touch-enabled devices on the Sigma Stronghold site, by way of demonstration.

### Step 1: Add Modernizr to Sigma Stronghold's page:

~~~{.html}
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<link href="http://fonts.googleapis.com/css?family=Nosifer|Special+Elite" rel="stylesheet">
<script src="Modernizr-touch.js"></script>
<link rel="stylesheet" href="styles.css">
<title>Sigma Stronghold</title>
</head>
~~~

##### index.html

## Step 2: Edit CSS

### Code

~~~{.css}
/* Vertical navigation for touch devices */
html.touch #header {
  padding: 1em 0;
}
html.touch #header h1, #header h3 {
  padding: 0 .5em;
}
html.touch #header nav ul li {
  float: none;
  clear: both;
  width: 100%;
  margin: .5em 0;
}
html.touch #header nav ul li a {
  margin: 0;
  padding: .75em;
}
~~~

##### styles.css

## And now touch devices...

### Figure: Sigma on iPad

![iPad used to get tabs, but gets touch navigation now](images/08-ipad.png)

## Detecting other things

To detect various client-side features, you can use a combination of third-party testing tools like Modernizr and your own JS savvy.

### Pixel Density

Say you want to know the pixel density of the current device. This is relatively straightforward in JavaScript:

#### In its simplest form...

~~~{.javascript}
if (window.devicePixelRatio) {
  alert(window.devicePixelRatio);
}
~~~~

## And doing a little something with the info

Going back to our simple HTML page...

~~~{.html}
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>

<script>
  $(document).ready(function() {
    if (window.devicePixelRatio) {
      var $li = $('<li></li>').html('Device Pixel Ratio: ' + window.devicePixelRatio);
      $("#javascript").next('ul').append($li);
    }
  });
</script>

<style type="text/css">
  .touchdetails { display: none; }
  .touch #details-touch { display: list-item; }
  .no-touch #details-notouch { display: list-item; }
</style>

<title>Device and Feature Detection!</title>
~~~

## Giving it a `<ul>` to Populate

~~~{.html}
<h2 id="modernizr">Current Browser: Modernizr</h2>

<ul>
  <li class="touchdetails" id="details-notouch">Does <em>not</em> support touch events</li>
  <li class="touchdetails" id="details-touch"><em>Does</em> support touch events</li>
</ul>

<h2 id="javascript">Current Browser: Other JavaScript Info</h2>

<ul>

</ul>
~~~

## Et, Voila!

![](images/08-pixel.png)

![](images/08-pixel-iphone.png)

## So that's client-side detection, but what about when...

Sometimes you may need to know information about your device and browser before you serve content. Maybe you want to redirect mobile devices entirely. Maybe you want to know details about the device's support.

## Zombie Detection Databases

Mobile device databases contain detailed information about the browser, platform, and hardware features of mobile devices. All a device detection database needs is a user agent string and it can tell you a lot about the device.

## Unique DNA string

Every browser in the world has a user agent string. This string tells us a lot about the browser.

~~~
Mozilla/5.0 (Windows NT 6.0) AppleWebKit/535.1 (KHTML, like Gecko) 
Chrome/14.0.792.0 Safari/535.1
~~~

That’s the user agent string for Chrome 14 running on Windows Vista. Obvious, right?

## User agent sniffing is evil, right?

You’ve heard the propaganda that says user agent switching is a bad practice. And who can forget the many web sites left behind during the "runs best on IE6" era.

But you're fighting zombies here! Religion takes a back seat to survival.

Plus, 25 of Alexa’s Top 30 sites use device detection. The five that don’t? They don’t have mobile sites at all.

## Many device detection database options

* [WURFL][wurfl] (Wireless Universal Resource FiLe) by [ScientiaMobile][scientiamobile]
* [DeviceAtlas][deviceatlas] by [dotMobi][dotmobi]
* New Apache [DeviceMap][devicemap] Project
* [51degrees][51]

Pay special attention to the licenses.

## Get an ID on those zombies

Let’s do a test run using a device detection database.

1. Go to the [ScientiaMobile WURFL Explorer][explorer] on your mobile phone
2. Check out the various attributes. What do you see that would be useful?
3. Can you find the screen resolution of your phone?
4. Go to the [ScientiaMobile WURFL Explorer][explorer] on your laptop

## Testing capabilities

Device databases are most useful for testing capabilities. Once you have a user agent string, you can things like:

### Is this a mobile device?

~~~{.php}
$value = $device->getCapability('is_wireless_device');
~~~

OR

### Does this browser-device combo support cookies?

~~~{.php}
$value = $device->getCapability('cookie_support');
~~~

## Zombie are like snowflakes

Each one is unique, but for the most part, you don’t care. You can’t build a specific tool for each one, even if a specialized weapon would be most effective.

Instead, you need to group them into categories that are similar enough that you can treat them similarly.

## Herd them into device classes

![](images/device-herds.jpg)

A *device class* is an abstract collection of common characteristics that define a group of devices and their browsers.

## As few device classes as possible

### Figure: Typical device classes

![](images/device-classes.jpg)

## Tips for device detection

* Responsive web design still makes sense within device classes
* Overlap as much as you can between templates. No need to maintain wholly separate templates.
* Think about what you fallback to if the device isn’t found in the database.

## Best practices

* Support every URL regardless of device
* Don’t dumb it down just because the screen is smaller
* Allow people to select a different experience
* Use JavaScript to verify the detection and correct errors
* Feed the corrections back into your database
* [RESS: Responsive Design + Server Side Components][ress]

## Putting it to work

### Writing some code to interact with the WURFL data

#### Code

~~~{.php}
<?php

// Include the WURFL Cloud Client 
require_once 'WurflCloudClient-PHP-1.0.2-Simple/Client/Client.php';
$api_key        = 'YOUR API KEY HERE';
$is_phone_like  = NULL;
$is_touch       = NULL;

// Create a configuration object  
$config = new WurflCloud_Client_Config();  
 
// Set your WURFL Cloud API Key  
$config->api_key = $api_key;   
 
if ($api_key) {
  // Create the WURFL Cloud Client  
  $client = new WurflCloud_Client_Client($config);  
  
  // Detect your device  
  $client->detectDevice();
  
  $is_phone_like = ($client->getDeviceCapability('has_cellular_radio')) ? "Has a cellular radio" : "Does NOT have a cellular radio";
  $is_touch = ($client->getDeviceCapability('is_touchscreen')) ? "Touchscreen" : "NOT touchscreen";
}

?>
~~~

##### zombie-detect.php (`examples/08/04-wurfl`)

## Displaying the information gathered

### Code

~~~{.php}
<?php require_once('zombie-detect.php'); ?>
<!doctype html>
<html>
<head>
<!-- ... -->
  <title>Device Detection!</title>
</head>
<body>
<h1><strike>Device</strike> Zombie Detection</h1>

<h2 id="wurfl">Current User Agent/Device/Browser: WURFL</h2>

<ul>
<li><?php print $is_phone_like; ?></li>
<li><?php print $is_touch; ?></li>
</ul>

<h2 id="modernizr">Current Browser: Modernizr</h2>

<ul>
  <li class="touchdetails" id="details-notouch">Does <em>not</em> support touch events</li>
  <li class="touchdetails" id="details-touch"><em>Does</em> support touch events</li>
</ul>

<h2 id="javascript">Current Browser: Other JavaScript Info</h2>

<ul>

</ul>

</body>
</html>
~~~

##### index.html

## [And](../presenter-examples/08/04-wurfl)

![Desktop browser](images/08-wurfl-data.png)

![iPhone](images/08-wurfl-data-iphone.png)

# But what about testing all of this stuff?

## Some perspective

> If you think your web site works, you just haven’t tested enough. It is broken somewhere.
> —Lyza Gardner

## We can’t test everything

* No one tests every possible device and browser combination.
* Even on desktop, we don’t test every possible combination.
* So we have to make practical decisions about what we can reasonably test and develop sites in a way that minimizes potential issues.

## What does it mean to “support” a device?

* We think of support as coming in three tiers:
    * Devices and browsers that we explicitly support.
    * Devices and browsers that we don’t explicitly support, but that we expect to work in some fashion because we’ve built the site with best practices.
    * Devices and browsers we cannot support because they don’t meet a minimum bar for the application or site.
* The devices and browsers that we explicitly support are the ones we need to test on.

# How do you decide what devices to support?

## Requirements

* Browser features
* Device capabilities
* Hardware performance
* Network speed & availability

## Audience

* Analytics
* Surveying
* Geographic Trends
* Demographics

## A “Comprehensive” Guide to Mobile Statistics

![](images/guide-to-mobile-stats.png)

[http://blog.cloudfour.com/a-comprehensive-guide-to-mobile-statistics/](http://blog.cloudfour.com/a-comprehensive-guide-to-mobile-statistics/)

## Beware of the analytics trap

> We can’t predict future behavior from a current experience that sucks.

# Building a device testing library.

## Priority of devices will depend on what you support

* Let your project work dictate the order in which you buy devices.
* Once you have a foundation, plan for buying devices on a regular basis. Make it a known recurring expense. Include buying devices in project budgets.
* Save money by buying used devices.
* Buy GSM phones so you can use a single SIM card for all the phones.
* Get a microSIM adapter so you can move a microSIM into a regular-sized SIM slot.
* Work with others in your community to share devices.
* Don’t forget your local testing center (AKA, your carrier store)

## A suggested starter kit.

* iOS devices: focus on old devices like the original iPod Touch and older iPhones. It is very likely that you or your co-workers already own iOS devices that you can borrow.
* Android: Buy unlocked GSM versions of each Nexus device. Get a Samsung Galaxy S and a more recent Galaxy device.
* Blackberry: Vary the input between those that have touch and those that don’t. BB6.0 and above are WebKit and substantially better. 5.0 is ok. 4.x is horrible.
* Windows Phone: Nokia Lumia line is the best option.
* Symbian: So many Nokia devices. Look at your traffic logs and pick the most popular.
* Brilliant post from Brad Frost on [building a test lab without breaking the bank](http://bradfrostweb.com/blog/mobile/test-on-real-mobile-devices-without-breaking-the-bank/).

# Tools for testing.

## Beefing up your desktop browser

* [User agent switcher](https://addons.mozilla.org/en-US/firefox/addon/user-agent-switcher/)
* [User agent switcher config file](http://techpatterns.com/forums/about304.html)
* [Resizer](https://chrome.google.com/webstore/detail/kkelicaakdanhinjdeammmilcgefonfh) / [Web Developer Toolkit](http://chrispederick.com/work/web-developer/)
* [Mobile Performance Bookmarklets](http://stevesouders.com/mobileperf/mobileperfbkm.php)
* [jDrop](http://jdrop.org/)
* [Blaze.io Mobile Test](http://blaze.io/mobile)

## Adobe Shadow

* Fantastic [new tool for testing](http://labs.adobe.com/downloads/shadow.html).
* Works on iOS and Android
* Demostration

## Other tools

* [Weinre](http://people.apache.org/~pmuellr/weinre/): Foundation for Adobe Shadow
* [Debug.phonegap.com](http://debug.phonegap.com/): Free hosted version of weinre. Demo. Good for using on platforms that Adobe Shadow doesn’t support or if you need to test the actual browser.
* [Drive-in](https://github.com/scottjehl/Drive-In) and [Shim](https://github.com/marstall/shim#readme): Push pages like Adobe Shadow
* [Device Anywhere](http://www.keynotedeviceanywhere.com/) and [Perfecto Mobile](http://www.perfectomobile.com/): real remote debugging

## Testing improves with practice

> The dirty little secret is that the more you test—the more accurately you will determine when it’s ok not to.
—Stephanie Rieger


# And now it is time for [the future](08-future-friendly.html)

[zombie-types]: http://uncyclopedia.wikia.com/wiki/Zombie_Types
[wurfl]: http://wurfl.sourceforge.net/
[scientiamobile]: http://www.scientiamobile.com/
[deviceatlas]: http://deviceatlas.com/
[dotmobi]: http://mtld.mobi/
[51]: http://51degrees.mobi/Products/DeviceData.aspx
[devicemap]: http://wiki.apache.org/incubator/DeviceMapProposal
[explorer]: http://www.tera-wurfl.com/explore/
[ress]: http://www.lukew.com/ff/entry.asp?1392
[openddr]: http://openddr.org
